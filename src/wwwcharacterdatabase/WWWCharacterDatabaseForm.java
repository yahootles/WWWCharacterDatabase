/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wwwcharacterdatabase;

/**
 *
 * @author antho6229
 */
import java.io.*;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane.*;
import javax.swing.JOptionPane;
import static javax.swing.ListSelectionModel.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.*;
import javax.swing.table.*;

public class WWWCharacterDatabaseForm extends javax.swing.JFrame {

    /**
     * Creates new form WWWCharacterDatabaseForm
     */
    //table variables
    static Object[] columnNames = {"Name", "Health", "Aura", "Reflex", "DADA", "Potions", "Herb", "CI", "Int", "Strength", "Dark", "MU", "Charis", "Trans"};
    static CustomTableModel tModel = new CustomTableModel(columnNames, 0);
    int prevSelected = -1;

    //declaration for file chooser
    javax.swing.filechooser.FileFilter filter = new FileNameExtensionFilter("WWW file", "www");
    JFileChooser fc = new JFileChooser();
    File f;

    public static ArrayList<Character> charList = new ArrayList<Character>();

    public WWWCharacterDatabaseForm() {
        initComponents();

        //change width of first column
        TableColumnModel tcm = charTable.getColumnModel();
        tcm.getColumn(0).setPreferredWidth(180);

        charTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                selectionChanged();
            }
        });

        loadDatabase();

        //set the filter
        fc.setFileFilter(filter);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        tablePane = new javax.swing.JScrollPane();
        charTable = new javax.swing.JTable();
        notesPane = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextPane();
        notesLabel = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        importItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closingHandler(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(153, 153, 153));

        charTable.setBackground(new java.awt.Color(214, 217, 223));
        charTable.setModel(this.tModel);
        charTable.setGridColor(new java.awt.Color(255, 255, 255));
        charTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        charTable.setShowVerticalLines(false);
        tablePane.setViewportView(charTable);

        notesPane.setViewportView(notesTextArea);

        notesLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        notesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        notesLabel.setText("Notes");

        importButton.setText("Import from file");
        importButton.setMaximumSize(new java.awt.Dimension(127, 25));
        importButton.setMinimumSize(new java.awt.Dimension(127, 25));
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add character");
        addButton.setMaximumSize(new java.awt.Dimension(127, 25));
        addButton.setMinimumSize(new java.awt.Dimension(127, 25));
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit character");
        editButton.setMaximumSize(new java.awt.Dimension(127, 25));
        editButton.setMinimumSize(new java.awt.Dimension(127, 25));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete character");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(importButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(notesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(46, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(notesLabel)
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81))
        );

        fileMenu.setText("File");

        importItem.setText("Import");
        importItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importItemActionPerformed(evt);
            }
        });
        fileMenu.add(importItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");
        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void importItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importItemActionPerformed
        importButton.doClick(0);
    }//GEN-LAST:event_importItemActionPerformed

    private void closingHandler(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closingHandler
        saveDatabase();
    }//GEN-LAST:event_closingHandler

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        //(int state, String n, int heal, int a, int r, int d, int p, int h, int c, int i, int s, int dar, int m, int ch, int t)
        int row = charTable.getSelectedRow();
        System.out.println(String.valueOf(row));
        Character tempChar = charList.get(row);
        System.out.println(tempChar.toString() + row);
        //System.out.println("yay");
        String n = tempChar.name;
        int heal = tempChar.health;
        //System.out.println(n);
        int a = tempChar.aura;
        int r = tempChar.reflex;
        int d = tempChar.dada;
        int p = tempChar.potions;
        int h = tempChar.herb;
        int c = tempChar.ci;
        int i = tempChar.intel;
        int s = tempChar.stren;
        int dar = tempChar.dark;
        int m = tempChar.mu;
        int ch = tempChar.charis;
        int t = tempChar.trans;
        new addCharacterForm(1, row, n, heal, a, r, d, p, h, c, i, s, dar, m, ch, t).setVisible(true);
        //System.out.println("yay2");
    }//GEN-LAST:event_editButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        new addCharacterForm(0, 0, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0).setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        int num = fc.showOpenDialog(mainPanel);

        if (num == fc.APPROVE_OPTION) {
            f = fc.getSelectedFile();
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Method that gets called every time a new row is selected. It saves the
     * notes and displays the notes of the newly selected character
     */
    private void selectionChanged() {
        int curSelected = charTable.getSelectedRow();

        if (prevSelected >= 0) {
            charList.get(prevSelected).notes = notesTextArea.getText();
            notesTextArea.setText(charList.get(curSelected).notes);
            prevSelected = curSelected;
        } else {
            notesTextArea.setText(charList.get(curSelected).notes);
            prevSelected = curSelected;
        }
    }

    private void saveNotes() {

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WWWCharacterDatabaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WWWCharacterDatabaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WWWCharacterDatabaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WWWCharacterDatabaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WWWCharacterDatabaseForm().setVisible(true);
            }
        });
    }

    /**
     * Method that adds a Character to an ArrayList and class the method to add
     * it to the table
     *
     * @param charac - Character being added to he ArrayList
     */
    /**
     * Method that adds Characters to the list or replaces an already added
     * Character's values
     *
     * @param charac - The Character being added
     * @param index - The index at which to replace the values of that character
     */
    public static void addToCharList(Character charac, int index) {

        if (index < 0) {
            charList.add(charac);
            addToTable(charac, index);
        } else {
            charList.get(index).setAura(charac.aura);
            charList.get(index).setCI(charac.ci);
            charList.get(index).setCharis(charac.charis);
            charList.get(index).setDADA(charac.dada);
            charList.get(index).setDark(charac.dark);
            charList.get(index).setHealth(charac.health);
            charList.get(index).setHerb(charac.herb);
            charList.get(index).setIntel(charac.intel);
            charList.get(index).setMU(charac.mu);
            charList.get(index).setName(charac.name);
            charList.get(index).setPotions(charac.potions);
            charList.get(index).setReflex(charac.reflex);
            charList.get(index).setStren(charac.stren);
            charList.get(index).setTrans(charac.trans);

            addToTable(charac, index);
        }
    }

    /**
     * Method that adds new Characters or updates current Characters in the
     * table
     *
     * @param charac - Character being added to the table
     * @param index - index of the Character being updated(if it is being
     * updated)
     */
    public static void addToTable(Character charac, int index) {
        //{"Name", "Health", "Aura", "Reflex", "DADA", "Potions", "Herb", "CI", 
        //"Int", "Strength", "Darkness", "MU", "Charisma", "Trans"
        String[] data = new String[14];
        data[0] = charac.name;
        data[1] = Integer.toString(charac.health);
        data[2] = Integer.toString(charac.aura);
        data[3] = Integer.toString(charac.reflex);
        data[4] = Integer.toString(charac.dada);
        data[5] = Integer.toString(charac.potions);
        data[6] = Integer.toString(charac.herb);
        data[7] = Integer.toString(charac.ci);
        data[8] = Integer.toString(charac.intel);
        data[9] = Integer.toString(charac.stren);
        data[10] = Integer.toString(charac.dark);
        data[11] = Integer.toString(charac.mu);
        data[12] = Integer.toString(charac.charis);
        data[13] = Integer.toString(charac.trans);

        if (index < 0) {
            tModel.addRow(data);
        } else {
            for (int i = 0; i < data.length; i++) {
                tModel.setValueAt(data[i], index, i);
            }
        }
    }

    /**
     * Method that saves the database into a .dat file by serializing an array
     */
    public void saveDatabase() {
        if (charTable.getSelectedRow() >= 0) {
            charList.get(charTable.getSelectedRow()).notes = notesTextArea.getText();
        }

        try {
            //set up outpu streams
            FileOutputStream fileOut = new FileOutputStream("data.dat", false);
            ObjectOutputStream obOut = new ObjectOutputStream(fileOut);

            //get number of Characters
            int length = charList.size();

            //create a new array of that length
            Character[] tempArray = new Character[length];

            //get the Characters from the arraylist and pout them into the array
            for (int i = 0; i < length; i++) {
                tempArray[i] = charList.get(i);
            }

            //write the array to the file
            obOut.writeObject(tempArray);

            //flush and close outputs
            obOut.flush();
            obOut.close();
            fileOut.flush();
            fileOut.close();
        } catch (FileNotFoundException fnfe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + fnfe);
        } catch (IOException ioe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + ioe);
        }

        //exit the program because method only gets called when the X is clicked
        System.exit(0);
    }

    /**
     * Method used to load the database from a .dat file
     */
    public static void loadDatabase() {
        try {
            //set up input streams
            FileInputStream fileIn = new FileInputStream("data.dat");
            ObjectInputStream obIn = new ObjectInputStream(fileIn);

            //read in an array of Characters
            Character[] tempArray = (Character[]) obIn.readObject();

            //add each Character in the array to the arraylist
            for (int i = 0; i < tempArray.length; i++) {
                addToCharList(tempArray[i], -1);
            }

            //close inputs
            obIn.close();
            fileIn.close();
        } catch (IOException ioe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + ioe);
        } catch (ClassNotFoundException cnfe) {
            System.out.println("An error has occured.");
            System.err.println("Exception:" + cnfe);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable charTable;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton importButton;
    private javax.swing.JMenuItem importItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JScrollPane notesPane;
    private javax.swing.JTextPane notesTextArea;
    private javax.swing.JScrollPane tablePane;
    // End of variables declaration//GEN-END:variables
}
